import { fishCollection } from './FishCollection';

// Define the Fish interface to represent a fish in the tank
export interface Fish {
  id: string;
  originalId?: string;
  name: string;
  fishData?: {
    name: string;
    [key: string]: any;
  };
  species?: string;
  sex?: string;
  colorHue?: number;
  patternType?: string;
  finShape?: string;
  eyeType?: string;
  size?: number;
  maxSize?: number;
  age?: number;
  speed?: number;
  senseRadius?: number;
  hungerDrive?: number;
  rarityGene?: number;
  constitution?: number;
  shiny?: boolean;
  favorite?: boolean;
  selected?: boolean;
  [key: string]: any; // For any additional properties
}

// Define the FishCard props interface
export interface FishCardProps {
  fish: Fish;
  onClose: () => void;
  onSaveName: (newName: string) => void;
  onToggleFavorite: () => void;
  onRelease: () => void;
  onSaveToCollection: () => void;
}

// Define the FishCard class to manage the fish card UI
export class FishCard {
  private element: HTMLElement;
  private props: FishCardProps;

  constructor(props: FishCardProps) {
    this.props = props;
    this.element = this.createFishCard();
  }

  // Create the fish card HTML element
  private createFishCard(): HTMLElement {
    const { fish } = this.props;
    const card = document.createElement('div');
    card.className = 'fish-card';
    card.style.display = 'block';
    
    card.innerHTML = `
      <div style="display:flex; align-items:center; gap:8px;">
        <button id="toggleFav" style="background:none; border:none; cursor:pointer; font-size:1.5em; color:${
          fish.favorite ? '#ffd700' : '#888'}; padding:4px;" title="${
          fish.favorite ? 'Remove from favorites' : 'Add to favorites'}">
          ${fish.favorite ? '★' : '☆'}
        </button>
        <strong id="fc-name">${fish.name || 'Unnamed Fish'}</strong>
        <span class="badge" id="fc-sex">${fish.sex || ''}</span>
        <span class="badge" id="fc-stage"></span>
        <span class="badge" id="fc-shiny" style="display:${fish.shiny ? 'inline' : 'none'}">✨ Shiny</span>
      </div>

      <div class="small">ID: <span id="fc-id">${fish.id}</span></div>
      <div class="small">Age: <span id="fc-age">${fish.age ? Math.floor(fish.age) : 'N/A'}</span> • Size: <span id="fc-size">${fish.size || 'N/A'}</span></div>
      <div class="small" id="fc-core-stats"></div>
      <div class="small" id="fc-appearance"></div>
      <div class="small" id="fc-parents"></div>

      <label class="small">Rename</label>
      <input type="text" id="renameFish" placeholder="Type a name…" value="${fish.name || ''}" />
      <div style="display:flex; flex-direction: column; gap: 6px; margin-top: 12px;">
        <div style="display: flex; gap: 6px;">
          <button id="saveName" style="flex: 1;">Save Name</button>
          <button id="releaseFish" style="background-color: #ff4444; color: white;">Release</button>
          <button id="closeCard">Close</button>
        </div>
        <button id="saveToCollection" style="background-color: #4CAF50; color: white; padding: 8px 0;">
          Save to Collection
        </button>
      </div>
    `;

    // Add event listeners
    this.setupEventListeners(card);
    
    return card;
  }

  // Set up event listeners for the fish card
  private setupEventListeners(card: HTMLElement): void {
    const saveBtn = card.querySelector('#saveName');
    const closeBtn = card.querySelector('#closeCard');
    const input = card.querySelector('#renameFish') as HTMLInputElement;
    const favBtn = card.querySelector('#toggleFav');
    const releaseBtn = card.querySelector('#releaseFish');
    const saveToCollectionBtn = card.querySelector('#saveToCollection');

    saveBtn?.addEventListener('click', () => {
      const newName = input?.value.trim();
      if (newName) {
        this.props.onSaveName(newName);
      }
    });

    closeBtn?.addEventListener('click', () => this.props.onClose());
    
    favBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      this.props.onToggleFavorite();
    });

    releaseBtn?.addEventListener('click', () => this.props.onRelease());
    saveToCollectionBtn?.addEventListener('click', () => this.props.onSaveToCollection());
  }

  // Update the fish card with new fish data
  public update(fish: Fish): void {
    this.props.fish = { ...this.props.fish, ...fish };
    
    // Update name if it exists in the DOM
    const nameElement = this.element.querySelector('#fc-name');
    if (nameElement) {
      nameElement.textContent = this.props.fish.name || 'Unnamed Fish';
    }
    
    // Update input field if it exists
    const input = this.element.querySelector('#renameFish') as HTMLInputElement;
    if (input) {
      input.value = this.props.fish.name || '';
    }
    
    // Update favorite button
    const favBtn = this.element.querySelector('#toggleFav');
    if (favBtn) {
      favBtn.textContent = this.props.fish.favorite ? '★' : '☆';
      favBtn.setAttribute('style', `background:none; border:none; cursor:pointer; font-size:1.5em; color:${
        this.props.fish.favorite ? '#ffd700' : '#888'}; padding:4px;`);
      favBtn.setAttribute('title', this.props.fish.favorite ? 'Remove from favorites' : 'Add to favorites');
    }
    
    // Update other fish stats if needed
    const ageElement = this.element.querySelector('#fc-age');
    if (ageElement && this.props.fish.age !== undefined) {
      ageElement.textContent = Math.floor(this.props.fish.age).toString();
    }
    
    const sizeElement = this.element.querySelector('#fc-size');
    if (sizeElement && this.props.fish.size !== undefined) {
      sizeElement.textContent = this.props.fish.size.toString();
    }
    
    // Update other elements as needed...
  }

  // Get the HTML element of the fish card
  public getElement(): HTMLElement {
    return this.element;
  }

  // Show the fish card
  public show(): void {
    this.element.style.display = 'block';
  }

  // Hide the fish card
  public hide(): void {
    this.element.style.display = 'none';
  }
}
